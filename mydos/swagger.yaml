openapi : "3.0.0"
info :
  title : "MyDos API- Express and Swagger"
  version : "1.1.0"
  description : "Practice App for Swagger"
  contact :
    email : "mayank@gmail.com"
    url : "mayanksahu.tech"
  
# servers :
#   - url : "http://localhost:3000/api/v1"
#     description : "Local Server"
  
#   - url : "https://mydos.herokuapp.com/api/v1"
#     description : "Heroku Server"

servers :
  - url : "{protocol}://localhost:5000/api/{version}"
    description : "for local host only"
    variables:
      version:
        enum: 
          - v1
          - v2
        default: v1
      protocol:
        enum:
          - http
          - https
        default: http


components :
  securitySchemes :
    cookieAuth :
      type : apiKey
      in : cookie
      name : mydos_auth
      description : "Cookie based authentication"
    
    BearerAuth :
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
      name: Authorization
      description: "Bearer token based authentication"

paths :
  /mayank:
    get:
      tags:
        - String
      summary: "Get the name of the user"
      responses:
        200:
          description: "Successful operation"
          content :
            application/json:
              schema:
                type: string
                example: "Mayank Sahu"
        401:
          description: "Unauthorized"
          content :
            application/json:
              schema:
                type: string
                example: "Unauthorized"
        400:
          description: "Bad Request"
          content :
            application/json:
              schema:
                type: string
                example: "Bad Request"
  
  /msobject:
    get:
      tags:
        - Object
      summary: "Get the unique info of user"
      responses:
        200:
          description: "Successful operation"
          content :
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Mayank Sahu"
                  age:
                    type: number
                    example: "21"
                  city:
                    type: string
                    example: "Noida"
        401:
          description: "Unauthorized"
          
        400:
          description: "Bad Request"
         
  /courses:
    get:
      tags:
        - Array
      summary: "Get all the courses"
      responses:
        200:
          description: "Successful operation"
          content :
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      example: "1"
                    name:
                      type: string
                      example: "Python"
                    price:
                      type: number
                      example: "100"
                    
              
        401:
          description: "Unauthorized"
          
        400:
          description: "Bad Request"

    post:
      tags:
        - String
      summary: "Add a new course"
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Python"
                price:
                  type: number
                  example: "100"
      responses:
        200:
          description: "Successful operation"
          content :
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      example: "1"
                    name:
                      type: string
                      example: "Python"
                    price:
                      type: number
                      example: "100"
                    
              
        401:
          description: "Unauthorized"
          
        400:
          description: "Bad Request"

  /courses/{id}:
    get:
      tags:
        - String
      summary: "Get the course by id"
      parameters:
        - name: id
          in: path
          description: "Course id"
          required: true
          default: 1
          schema:
            type: number
            example: 1
      responses:
        200:
          description: "Successful operation"
          content :
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: "1"
                  name:
                    type: string
                    example: "Python"
                  price:
                    type: number
                    example: "100"
        401:
          description: "Unauthorized"
          
        400:
          description: "Bad Request"
         
  /coursequery:
    get:
      tags:
        - String
      summary: trying to learn about query
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
            enum: [delhi, london, jaipur]
        - name: device
          in: query
          required: true
          schema:
            type: string
            enum: [web, mobile]
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
                  device:
                    type: string
                
        400:
          description: Bad request
        500:
          description: internal server error

  /courseupload:
    post:
      tags:
        - String
      summary: uploading course image
      parameters:
        - in: header
          name: auth
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: All good success
              
        400:
          description: Bad request
        500:
          description: internal server error


  